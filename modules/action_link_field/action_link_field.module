<?php

/**
 * @file
 * Contains hook implementations for the Action Link Field module.
 */

use Drupal\action_link\Plugin\StateAction\EntityFieldStateActionBase;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter(): action_link_form.
 */
function action_link_field_form_action_link_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $action_link_plugin_id = $form['plugin']['#default_value']['plugin_id'];

  // Bail on an 'add' form where the plugin ID is not yet set.
  if (empty($action_link_plugin_id)) {
    return;
  }

  $plugin_definition = \Drupal::service('plugin.manager.action_link_state_action')->getDefinition($action_link_plugin_id);
  // dsm($plugin_definition);
  if (!is_subclass_of($plugin_definition['class'], EntityFieldStateActionBase::class)) {
    return;
  }
  // TODO: check only 1 dynamic parameter. we won't know what to do with more.

  $action_link_entity = $form_state->getFormObject()->getEntity();

  $form['plugin']['container']['computed_field'] = [
    '#type' => 'checkbox',
    '#title' => t('Show as field'),
    '#description' => t('If selected, a computed field on the target entity type is automatically defined.'),
    '#default_value' => $action_link_entity->getThirdPartySetting('action_link_field', 'computed_field', FALSE),
    '#weight' => 100,
  ];

  $form['#entity_builders'][] = 'action_link_field_form_action_link_form_entity_builder';
}

/**
 * Entity builder callback.
 */
function action_link_field_form_action_link_form_entity_builder($entity_type, EntityInterface $entity, array $form, FormStateInterface $form_state) {
  $new_value = $form_state->getValue(['plugin', 'computed_field'], FALSE);

  $entity->setThirdPartySetting('action_link_field', 'computed_field', $new_value);
}

/**
 * Implements hook_ENTITY_TYPE_insert(): action_link
 */
function action_link_field_action_link_insert(EntityInterface $entity) {
  // If a new action_link has the computed field setting, we clear caches so
  // the derived computed field plugin and the computed field definition are
  // picked up.
  if ($entity->getThirdPartySetting('action_link_field', 'computed_field', FALSE)) {
    \Drupal::service('plugin.manager.computed_field')->clearCachedDefinitions();
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
    Cache::invalidateTags(['entity_field_info']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update(): action_link
 */
function action_link_field_action_link_update(EntityInterface $entity) {
  // Clear field definition cache if the setting value has changed (because we
  // need to define or remove a field), or if the setting is true (because the
  // field may need to be updated).
  $computed_field_setting = $entity->getThirdPartySetting('action_link_field', 'computed_field', FALSE);
  $computed_field_setting_old_value = $entity->original->getThirdPartySetting('action_link_field', 'computed_field', FALSE);
  if ($computed_field_setting || ($computed_field_setting != $computed_field_setting_old_value)) {
    \Drupal::service('plugin.manager.computed_field')->clearCachedDefinitions();
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
    Cache::invalidateTags(['entity_field_info']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete(): action_link
 */
function action_link_field_action_link_delete(EntityInterface $entity) {
  if ($entity->getThirdPartySetting('action_link_field', 'computed_field', FALSE)) {
    \Drupal::service('plugin.manager.computed_field')->clearCachedDefinitions();
    \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
    Cache::invalidateTags(['entity_field_info']);
  }
}
